#!/usr/bin/env ruby
# frozen_string_literal: true

# Claude-Guard Integration Script
# This script provides easy commands to work with Claude when tests fail

require 'json'
require 'fileutils'

class ClaudeGuardIntegration
  FAILURE_FILE = "tmp/test_failures.md"
  
  def self.show_help
    puts <<~HELP
      🤖 Claude-Guard Integration Commands:
      
      ./bin/claude-guard status    - Show current test status
      ./bin/claude-guard failures  - Show failure report (if any)
      ./bin/claude-guard prompt    - Generate Claude prompt for failures
      ./bin/claude-guard clean     - Clean up failure reports
      ./bin/claude-guard watch     - Watch for test failures and auto-generate prompts
      
      💡 Typical workflow:
      1. Start Guard: ./bin/guard
      2. In another terminal: ./bin/claude-guard watch
      3. When tests fail, copy the generated prompt to Claude
      4. Claude fixes the tests
      5. Guard automatically re-runs tests
    HELP
  end
  
  def self.show_status
    if File.exist?(FAILURE_FILE)
      content = File.read(FAILURE_FILE)
      failure_count = content.scan(/^### \d+\./).length
      puts "❌ #{failure_count} test(s) currently failing"
      puts "📝 Failure report available: #{FAILURE_FILE}"
    else
      puts "✅ No test failures detected"
    end
  end
  
  def self.show_failures
    if File.exist?(FAILURE_FILE)
      puts File.read(FAILURE_FILE)
    else
      puts "✅ No test failures found"
    end
  end
  
  def self.generate_claude_prompt
    if File.exist?(FAILURE_FILE)
      content = File.read(FAILURE_FILE)
      
      # Extract the quick Claude prompt section
      if content.include?("## Quick Claude Prompt")
        prompt_section = content.split("## Quick Claude Prompt").last
        puts "📋 Copy this prompt to Claude:"
        puts "=" * 50
        puts prompt_section.strip
        puts "=" * 50
        
        # Copy to clipboard on macOS
        if RUBY_PLATFORM.include?('darwin')
          IO.popen('pbcopy', 'w') { |f| f << prompt_section.strip }
          puts "📋 Prompt copied to clipboard!"
        end
      end
    else
      puts "✅ No failures to fix"
    end
  end
  
  def self.clean_reports
    FileUtils.rm_f(FAILURE_FILE)
    puts "🧹 Cleaned up failure reports"
  end
  
  def self.watch_for_failures
    puts "👁️  Watching for test failures..."
    puts "Press Ctrl+C to stop"
    
    last_mtime = nil
    
    loop do
      if File.exist?(FAILURE_FILE)
        current_mtime = File.mtime(FAILURE_FILE)
        
        if last_mtime != current_mtime
          puts "\n🚨 New test failures detected!"
          generate_claude_prompt
          last_mtime = current_mtime
        end
      end
      
      sleep 1
    end
  rescue Interrupt
    puts "\n👋 Stopped watching"
  end
end

# Main command handler
case ARGV[0]
when 'status'
  ClaudeGuardIntegration.show_status
when 'failures'
  ClaudeGuardIntegration.show_failures
when 'prompt'
  ClaudeGuardIntegration.generate_claude_prompt
when 'clean'
  ClaudeGuardIntegration.clean_reports
when 'watch'
  ClaudeGuardIntegration.watch_for_failures
else
  ClaudeGuardIntegration.show_help
end