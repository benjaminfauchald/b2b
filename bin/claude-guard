#!/usr/bin/env ruby
# Claude + Guard integration helper

require 'json'
require 'fileutils'

class ClaudeGuard
  LOG_DIR = 'tmp/guard_logs'
  CURRENT_FAILURES_FILE = File.join(LOG_DIR, 'current_failures.json')
  FAILURE_SUMMARY_FILE = File.join(LOG_DIR, 'failure_summary.md')
  CLAUDE_PROMPT_FILE = 'tmp/claude_fix_prompt.md'
  
  def self.status
    unless File.exist?(CURRENT_FAILURES_FILE)
      puts "No test data found. Start Guard first: bundle exec guard"
      return
    end
    
    data = JSON.parse(File.read(CURRENT_FAILURES_FILE))
    
    if data['failure_count'] == 0
      puts "‚úÖ All tests passing!"
    else
      puts "‚ùå #{data['failure_count']} test(s) failing"
      puts "Run: bin/claude-guard prompt"
    end
  end
  
  def self.prompt
    unless File.exist?(CURRENT_FAILURES_FILE)
      puts "No test failures found."
      return
    end
    
    data = JSON.parse(File.read(CURRENT_FAILURES_FILE))
    
    if data['failure_count'] == 0
      puts "All tests are passing! Nothing to fix."
      return
    end
    
    # Generate Claude-optimized prompt
    prompt = "# Fix Failing Tests\n\n"
    prompt += "I have #{data['failure_count']} failing test(s) that need to be fixed:\n\n"
    
    data['failures'].each_with_index do |failure, index|
      prompt += "## Test #{index + 1}: #{failure['description']}\n"
      prompt += "- File: `#{failure['file_path']}:#{failure['line_number']}`\n"
      prompt += "- Error: ```\n#{failure['exception']}\n```\n\n"
    end
    
    prompt += "\nPlease analyze these failures and fix the code to make the tests pass."
    
    File.write(CLAUDE_PROMPT_FILE, prompt)
    
    puts "Claude prompt generated: #{CLAUDE_PROMPT_FILE}"
    puts "\nPrompt content:"
    puts "=" * 80
    puts prompt
    puts "=" * 80
    
    # Copy to clipboard on macOS
    if RUBY_PLATFORM.include?('darwin')
      IO.popen('pbcopy', 'w') { |io| io.write(prompt) }
      puts "\n‚úÖ Prompt copied to clipboard!"
    end
  end
  
  def self.watch
    puts "Watching for test failures... (Press Ctrl+C to stop)"
    
    last_failure_count = nil
    
    Signal.trap("INT") do
      puts "\nStopped watching."
      exit 0
    end
    
    loop do
      if File.exist?(CURRENT_FAILURES_FILE)
        data = JSON.parse(File.read(CURRENT_FAILURES_FILE))
        current_failure_count = data['failure_count']
        
        if current_failure_count != last_failure_count
          system('clear')
          
          if current_failure_count == 0
            puts "‚úÖ All tests passing! üéâ"
          else
            puts "‚ùå #{current_failure_count} test(s) failing!"
            puts "\nFailing tests:"
            data['failures'].each_with_index do |failure, index|
              puts "  #{index + 1}. #{failure['description']}"
              puts "     #{failure['file_path']}:#{failure['line_number']}"
            end
            puts "\nGenerate Claude prompt: bin/claude-guard prompt"
          end
          
          last_failure_count = current_failure_count
        end
      end
      
      sleep 2
    end
  end
  
  def self.reset
    FileUtils.rm_rf(LOG_DIR)
    puts "Test logs cleared."
  end
end

# Command line interface
case ARGV[0]
when 'prompt', 'p'
  ClaudeGuard.prompt
when 'watch', 'w'
  ClaudeGuard.watch
when 'status', 's'
  ClaudeGuard.status
when 'reset', 'r'
  ClaudeGuard.reset
else
  puts "Claude + Guard Test Integration"
  puts
  puts "Commands:"
  puts "  bin/claude-guard status  - Check current test status"
  puts "  bin/claude-guard prompt  - Generate Claude prompt for failures"
  puts "  bin/claude-guard watch   - Watch for test changes"
  puts "  bin/claude-guard reset   - Clear test logs"
  puts
  puts "Shortcuts:"
  puts "  s - status"
  puts "  p - prompt"
  puts "  w - watch"
  puts "  r - reset"
end