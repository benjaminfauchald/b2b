#!/usr/bin/env bash

# Simple Deploy Script with Quality Checks
# Usage: ./bin/simple_deploy [commit_message]
# Note: Creates a patch version tag to trigger deployment
# Must be on master branch with all changes committed

set -e  # Exit on any error

COMMIT_MESSAGE=${1:-"Deploy changes"}

echo "🚀 Starting simple deployment process..."

# Check if we're on master branch
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$current_branch" != "master" ]; then
    echo "⚠️  You're not on master branch. Current branch: $current_branch"
    echo "Switch to master branch first: git checkout master"
    echo "Or use ./bin/deploy for full develop->master deployment"
    exit 1
fi

echo "📋 Running pre-deployment quality checks..."

# 1. Fix RuboCop issues
echo "🔧 Checking and fixing RuboCop issues..."
if bundle exec rubocop --autocorrect; then
    echo "✅ RuboCop checks passed"
else
    echo "❌ RuboCop found unfixable issues. Please fix manually."
    exit 1
fi

# Check if RuboCop made any changes
if ! git diff-index --quiet HEAD --; then
    echo "📝 RuboCop made automatic fixes, staging changes..."
    git add -A
fi

# 2. Run critical tests (domain CSV import tests specifically)
echo "🧪 Running critical domain CSV import tests..."
if bundle exec rspec spec/requests/domains_csv_import_spec.rb --fail-fast; then
    echo "✅ Critical tests passed"
else
    echo "❌ Critical tests failed. Deployment aborted."
    exit 1
fi

# 3. Run full test suite (with timeout to avoid hanging) - Optional
echo "🧪 Running full test suite (optional - critical tests already passed)..."
# Use gtimeout on macOS, timeout on Linux
if command -v gtimeout >/dev/null 2>&1; then
    TIMEOUT_CMD="gtimeout 300"
elif command -v timeout >/dev/null 2>&1; then
    TIMEOUT_CMD="timeout 300"
else
    TIMEOUT_CMD=""
fi

if [ -n "$TIMEOUT_CMD" ]; then
    if $TIMEOUT_CMD bundle exec rspec --fail-fast; then
        echo "✅ All tests passed"
    else
        exit_code=$?
        if [ $exit_code -eq 124 ]; then
            echo "⚠️  Test suite timed out after 5 minutes, but critical tests passed. Proceeding with deployment."
        else
            echo "⚠️  Some tests failed, but critical tests passed. Proceeding with deployment."
        fi
    fi
else
    echo "⚠️  No timeout command available. Skipping full test suite (critical tests already passed)."
fi

# 4. Commit any remaining changes and deploy
if ! git diff-index --quiet HEAD --; then
    echo "📝 Committing changes..."
    git add -A
    git commit -m "$COMMIT_MESSAGE"
fi

# Get current version and calculate new patch version
LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
NEW_VERSION=$(echo $LATEST_TAG | awk -F. '{
    major=substr($1,2); minor=$2; patch=$3
    patch++
    print "v" major "." minor "." patch
}')

echo "🏷️  Creating new version tag: $NEW_VERSION"

# Push any commits first
echo "📤 Pushing commits to master..."
if git push origin master; then
    echo "✅ Successfully pushed to master branch"
else
    echo "❌ Push failed"
    exit 1
fi

# Create and push tag
RELEASE_NAME="Release $NEW_VERSION: $COMMIT_MESSAGE"
git tag -a "$NEW_VERSION" -m "$RELEASE_NAME"

echo "🚀 Pushing tag to trigger deployment..."
if git push origin "$NEW_VERSION"; then
    echo "✅ Successfully created and pushed tag $NEW_VERSION"
else
    echo "❌ Tag push failed"
    exit 1
fi

echo ""
echo ""
echo "🎉 Simple deployment completed successfully!"
echo "📊 Summary:"
echo "   ✅ RuboCop style checks passed"
echo "   ✅ Critical domain CSV import tests passed"
echo "   ✅ Version $NEW_VERSION tagged and pushed"
echo "   ✅ Deployment will be triggered by GitHub Actions"
echo ""
echo "📊 Monitor deployment at: https://github.com/benjaminfauchald/b2b/actions"