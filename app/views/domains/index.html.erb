<p style="color: green"><%= notice %></p>

<% content_for :title, "Domain Testing Dashboard" %>

<style>
.testing-dashboard {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
}

.dashboard-header {
  text-align: center;
  margin-bottom: 40px;
}

.dashboard-title {
  font-size: 2.5rem;
  color: #2c3e50;
  margin-bottom: 10px;
}

.dashboard-subtitle {
  color: #7f8c8d;
  font-size: 1.1rem;
}

.testing-section {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 30px;
  border-radius: 15px;
  margin-bottom: 30px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.1);
}

.testing-form {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 20px;
}

.form-group {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.form-label {
  font-size: 1.2rem;
  font-weight: 600;
  text-align: center;
}

.count-input {
  padding: 15px 20px;
  font-size: 1.5rem;
  border: none;
  border-radius: 10px;
  width: 200px;
  text-align: center;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.queue-button {
  background: #e74c3c;
  color: white;
  border: none;
  padding: 15px 40px;
  font-size: 1.2rem;
  font-weight: 600;
  border-radius: 50px;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(0,0,0,0.2);
}

.queue-button:hover:not(:disabled) {
  background: #c0392b;
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(0,0,0,0.3);
}

.queue-button:disabled {
  background: #95a5a6;
  cursor: not-allowed;
  transform: none;
}

.status-section {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.status-card {
  background: white;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
  border-left: 5px solid #3498db;
}

.status-title {
  font-size: 1.3rem;
  font-weight: 600;
  color: #2c3e50;
  margin-bottom: 15px;
}

.status-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 0;
  border-bottom: 1px solid #ecf0f1;
}

.status-item:last-child {
  border-bottom: none;
}

.status-label {
  color: #7f8c8d;
  font-weight: 500;
}

.status-value {
  font-weight: 600;
  color: #2c3e50;
}

.message-area {
  margin-top: 20px;
  padding: 15px;
  border-radius: 8px;
  display: none;
}

.message-success {
  background: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.message-error {
  background: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.domains-section {
  background: white;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.domains-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.domains-title {
  font-size: 1.5rem;
  color: #2c3e50;
  margin: 0;
}

.new-domain-btn {
  background: #27ae60;
  color: white;
  padding: 10px 20px;
  text-decoration: none;
  border-radius: 6px;
  font-weight: 500;
  transition: background 0.3s ease;
}

.new-domain-btn:hover {
  background: #229954;
  color: white;
  text-decoration: none;
}

.spinner {
  display: none;
  width: 20px;
  height: 20px;
  border: 2px solid #ffffff;
  border-top: 2px solid transparent;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-left: 10px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading {
  display: inline-block;
}
</style>

<div class="testing-dashboard">
  <div class="dashboard-header">
    <h1 class="dashboard-title">üåê Domain Testing Dashboard</h1>
    <p class="dashboard-subtitle">Queue domains for DNS and MX record testing</p>
  </div>

  <div class="testing-section">
    <div class="testing-form">
      <div class="form-group">
        <label class="form-label" for="domain-count">
          How many domains would you like to test?
        </label>
        <input 
          type="number" 
          id="domain-count" 
          class="count-input" 
          placeholder="Enter number"
          min="1" 
          max="1000" 
          value="5"
        >
        <small style="opacity: 0.8;">Enter a number between 1 and 1000</small>
      </div>
      
      <button type="button" id="queue-domains-btn" class="queue-button">
        üöÄ Queue Domains for Testing
        <span class="spinner" id="loading-spinner"></span>
      </button>
      
      <div id="message-area" class="message-area"></div>
    </div>
  </div>

  <div class="status-section">
    <div class="status-card">
      <h3 class="status-title">üìä Queue Status</h3>
      <div class="status-item">
        <span class="status-label">DNS Testing Queue:</span>
        <span class="status-value" id="dns-queue-count"><%= @queue_stats['domain_dns_testing'] || 0 %></span>
      </div>
      <div class="status-item">
        <span class="status-label">MX Testing Queue:</span>
        <span class="status-value" id="mx-queue-count"><%= @queue_stats['domain_mx_testing'] || 0 %></span>
      </div>
      <div class="status-item">
        <span class="status-label">Default Queue:</span>
        <span class="status-value" id="default-queue-count"><%= @queue_stats['default'] || 0 %></span>
      </div>
    </div>

    <div class="status-card">
      <h3 class="status-title">‚ö° System Status</h3>
      <div class="status-item">
        <span class="status-label">Total Processed:</span>
        <span class="status-value"><%= @queue_stats[:total_processed] || 0 %></span>
      </div>
      <div class="status-item">
        <span class="status-label">Total Failed:</span>
        <span class="status-value"><%= @queue_stats[:total_failed] || 0 %></span>
      </div>
      <div class="status-item">
        <span class="status-label">Workers Busy:</span>
        <span class="status-value"><%= @queue_stats[:workers_busy] || 0 %></span>
      </div>
    </div>
  </div>

  <div class="domains-section">
    <div class="domains-header">
      <h2 class="domains-title">Domain List</h2>
      <%= link_to "Add New Domain", new_domain_path, class: "new-domain-btn" %>
    </div>
    
    <div id="domains">
      <% if @domains.any? %>
        <% @domains.each do |domain| %>
          <%= render domain %>
          <p>
            <%= link_to "Show this domain", domain %>
          </p>
        <% end %>
      <% else %>
        <p style="text-align: center; color: #7f8c8d; padding: 40px;">
          No domains found. <a href="<%= new_domain_path %>">Add your first domain</a> to get started!
        </p>
      <% end %>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const queueButton = document.getElementById('queue-domains-btn');
  const countInput = document.getElementById('domain-count');
  const messageArea = document.getElementById('message-area');
  const spinner = document.getElementById('loading-spinner');
  
  // Queue status elements
  const dnsQueueCount = document.getElementById('dns-queue-count');
  const mxQueueCount = document.getElementById('mx-queue-count');
  const defaultQueueCount = document.getElementById('default-queue-count');

  function showMessage(message, isSuccess = true) {
    messageArea.textContent = message;
    messageArea.className = `message-area ${isSuccess ? 'message-success' : 'message-error'}`;
    messageArea.style.display = 'block';
    
    // Hide message after 5 seconds
    setTimeout(() => {
      messageArea.style.display = 'none';
    }, 5000);
  }

  function setLoading(loading) {
    queueButton.disabled = loading;
    if (loading) {
      spinner.classList.add('loading');
      queueButton.innerHTML = '‚è≥ Queueing Domains... <span class="spinner loading" id="loading-spinner"></span>';
    } else {
      spinner.classList.remove('loading');
      queueButton.innerHTML = 'üöÄ Queue Domains for Testing <span class="spinner" id="loading-spinner"></span>';
    }
  }

  function updateQueueStats(stats) {
    if (stats) {
      if (stats.domain_dns_testing !== undefined) {
        dnsQueueCount.textContent = stats.domain_dns_testing;
      }
      if (stats.domain_mx_testing !== undefined) {
        mxQueueCount.textContent = stats.domain_mx_testing;
      }
      if (stats.default !== undefined) {
        defaultQueueCount.textContent = stats.default;
      }
    }
  }

  function refreshQueueStatus() {
    fetch('/domains/queue_status', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        updateQueueStats(data.queue_stats);
      }
    })
    .catch(error => {
      console.error('Error refreshing queue status:', error);
    });
  }

  // Validate input as user types
  countInput.addEventListener('input', function() {
    const value = parseInt(this.value);
    const isValid = value >= 1 && value <= 1000;
    
    queueButton.disabled = !isValid || this.value === '';
    
    if (this.value !== '' && !isValid) {
      this.style.borderColor = '#e74c3c';
    } else {
      this.style.borderColor = '';
    }
  });

  // Handle form submission
  queueButton.addEventListener('click', function() {
    const count = parseInt(countInput.value);
    
    if (!count || count < 1 || count > 1000) {
      showMessage('Please enter a valid number between 1 and 1000', false);
      countInput.focus();
      return;
    }

    setLoading(true);
    
    // Optimistic UI update
    const currentDnsCount = parseInt(dnsQueueCount.textContent) || 0;
    dnsQueueCount.textContent = currentDnsCount + count;

    fetch('/domains/queue_testing', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      },
      body: JSON.stringify({ count: count })
    })
    .then(response => response.json())
    .then(data => {
      setLoading(false);
      
      if (data.success) {
        showMessage(data.message, true);
        updateQueueStats(data.queue_stats);
        
        // Add some visual feedback
        queueButton.style.background = '#27ae60';
        queueButton.innerHTML = '‚úÖ Domains Queued Successfully!';
        
        setTimeout(() => {
          queueButton.style.background = '#e74c3c';
          queueButton.innerHTML = 'üöÄ Queue Domains for Testing <span class="spinner" id="loading-spinner"></span>';
        }, 2000);
        
      } else {
        showMessage(data.message, false);
        // Revert optimistic update
        refreshQueueStatus();
      }
    })
    .catch(error => {
      setLoading(false);
      showMessage('Error queueing domains. Please try again.', false);
      console.error('Error:', error);
      // Revert optimistic update
      refreshQueueStatus();
    });
  });

  // Auto-refresh queue status every 10 seconds
  setInterval(refreshQueueStatus, 10000);

  // Allow Enter key in input field
  countInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      queueButton.click();
    }
  });

  // Focus on input field when page loads
  countInput.focus();
  countInput.select();
});
</script>
