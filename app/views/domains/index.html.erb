<% content_for :title, "Domain Testing Dashboard" %>

<div class="w-full">
  <%= render PageHeaderComponent.new(
    title: "Domain Testing Dashboard", 
    subtitle: "Manage and monitor your domain testing operations"
  ) do |component|
    component.with_actions do %>
      <%= link_to new_domain_path, 
          class: "px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 font-medium text-sm transition-colors" do %>
        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Add New Domain
      <% end %>
    <% end %>
  <% end %>

  <!-- Testing Controls Section -->
  <div class="mb-8">
    <%= render CardComponent.new(title: "Queue Testing", description: "Start DNS and MX testing for domains") do %>
      <%= form_with url: queue_testing_domains_path, method: :post, local: true, class: "space-y-6" do |form| %>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <%= form.label :dns_count, "DNS Testing Count", class: "block mb-2 text-sm font-medium text-gray-900 dark:text-white" %>
          <%= form.number_field :dns_count, 
              value: 10, 
              min: 1, 
              max: 1000,
              class: "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" %>
        </div>
        
        <div>
          <%= form.label :mx_count, "MX Testing Count", class: "block mb-2 text-sm font-medium text-gray-900 dark:text-white" %>
          <%= form.number_field :mx_count, 
              value: 10, 
              min: 1, 
              max: 1000,
              class: "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white" %>
        </div>
      </div>
      
      <div class="flex justify-center">
        <%= form.submit "Queue Testing", 
            class: "text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg text-sm px-8 py-3 text-center transition-all",
            id: "queue-button" %>
      </div>
    <% end %>
  <% end %>
  </div>

  <!-- Statistics Section -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <%= render StatsCardComponent.new(
      label: "DNS Testing Queue",
      value: @queue_stats['domain_dns_testing'] || 0,
      icon: "🔍",
      data_stat: "dns-queue"
    ) %>
    
    <%= render StatsCardComponent.new(
      label: "MX Testing Queue", 
      value: @queue_stats['domain_mx_testing'] || 0,
      icon: "✉️",
      data_stat: "mx-queue"
    ) %>
    
    <%= render StatsCardComponent.new(
      label: "Total Processed",
      value: @queue_stats[:total_processed] || 0,
      icon: "✅",
      trend: "+12.5%",
      trend_direction: "up",
      data_stat: "processed"
    ) %>
    
    <%= render StatsCardComponent.new(
      label: "Workers Busy",
      value: @queue_stats[:workers_busy] || 0,
      icon: "⚡",
      data_stat: "workers"
    ) %>
  </div>

  <!-- Domains Table Section -->
  <%= render CardComponent.new(title: "Domain List") do %>
    <% if @domains.any? %>
      <% 
        headers = ["Domain", "Status", "Last Tested", "DNS Status", "MX Status", "Actions"]
        rows = @domains.map do |domain|
          [
            domain.domain,
            domain.test_status.capitalize,
            domain.updated_at&.strftime("%Y-%m-%d %H:%M") || "Never",
            domain.dns.nil? ? "Not tested" : (domain.dns ? "Active" : "Inactive"),
            domain.mx.nil? ? "Not tested" : (domain.mx ? "Active" : "Inactive"),
            link_to("View", domain_path(domain), class: "text-blue-600 hover:text-blue-800 font-medium")
          ]
        end
      %>
      <%= render TableComponent.new(headers: headers, rows: rows) %>
    <% else %>
      <div class="text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No domains</h3>
        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Get started by adding your first domain.</p>
        <div class="mt-6">
          <%= link_to new_domain_path,
              class: "inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" do %>
            <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Add Domain
          <% end %>
        </div>
      </div>
    <% end %>
  <% end %>
</div>

<script>
// Auto-refresh queue status every 10 seconds
setInterval(function() {
  fetch('<%= queue_status_domains_path %>')
    .then(response => response.json())
    .then(data => {
      // Update queue stats if elements exist
      const dnsCount = document.querySelector('[data-stat="dns-queue"]');
      const mxCount = document.querySelector('[data-stat="mx-queue"]');
      const processed = document.querySelector('[data-stat="processed"]');
      const workers = document.querySelector('[data-stat="workers"]');
      
      if (dnsCount) dnsCount.textContent = data.domain_dns_testing || 0;
      if (mxCount) mxCount.textContent = data.domain_mx_testing || 0;
      if (processed) processed.textContent = data.total_processed || 0;
      if (workers) workers.textContent = data.workers_busy || 0;
    })
    .catch(error => console.log('Error fetching queue status:', error));
}, 10000);
</script>