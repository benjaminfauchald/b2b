name: Deploy to Production

on:
  push:
    branches: [ master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.0
        bundler-cache: true
    
    - name: Run linting
      run: bundle exec rubocop

  test:
    needs: lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.0
        bundler-cache: true
    
    - name: Setup test credentials
      run: |
        mkdir -p config/credentials
        echo "2b6511362ac3e7195e7097e15c402eaa" > config/credentials/test.key
    
    - name: Setup test database
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:password@localhost:5432/b2b_test
      run: |
        bin/rails db:create
        bin/rails db:migrate
    
    - name: Run tests
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:password@localhost:5432/b2b_test
        REDIS_URL: redis://localhost:6379/0
      run: bundle exec rspec

  sct_compliance:
    needs: lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.0
        bundler-cache: true
    
    - name: Setup test credentials
      run: |
        mkdir -p config/credentials
        echo "2b6511362ac3e7195e7097e15c402eaa" > config/credentials/test.key
    
    - name: Setup test database
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:password@localhost:5432/b2b_test
      run: |
        bin/rails db:create
        bin/rails db:migrate
    
    - name: Run SCT Compliance Check
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:password@localhost:5432/b2b_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        bundle exec rake sct:compliance

  deploy:
    needs: [lint, test, sct_compliance]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all tags for release creation
    
    - name: Get latest tag
      id: get_tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git tag --sort=-version:refname | head -1)
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"
    
    - name: Create GitHub Release
      if: steps.get_tag.outputs.latest_tag != ''
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.latest_tag }}
        release_name: "Release ${{ steps.get_tag.outputs.latest_tag }}: Production Deployment"
        body: |
          üöÄ **Production Deployment**
          
          **Tag:** ${{ steps.get_tag.outputs.latest_tag }}
          **Commit:** ${{ github.sha }}
          **Branch:** master
          
          **Changes included:**
          - All merged changes from develop branch
          - SCT compliance validation passed
          - RuboCop linting passed
          - Full test suite passed
          
          **Deployment Status:**
          - ‚úÖ Linting passed
          - ‚úÖ Tests passed  
          - ‚úÖ Deployed to production server
          
          This release has been automatically deployed to the production environment.
        draft: false
        prerelease: false
    
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd /home/benjamin/b2b
          git fetch origin
          git reset --hard origin/master
          
          # Debug rbenv setup
          echo "üîç Debugging Ruby environment..."
          echo "HOME: $HOME"
          ls -la $HOME/.rbenv/ || echo "rbenv directory not found"
          ls -la $HOME/.rbenv/versions/ || echo "rbenv versions not found"
          
          # Setup rbenv environment
          if [ -f "$HOME/.rbenv/bin/rbenv" ]; then
            echo "Found rbenv, setting up environment..."
            export PATH="$HOME/.rbenv/bin:$PATH"
            eval "$(rbenv init -)"
            export PATH="$HOME/.rbenv/shims:$PATH"
            
            # Check if Ruby 3.3.0 is installed
            if [ ! -d "$HOME/.rbenv/versions/3.3.0" ]; then
              echo "Installing Ruby 3.3.0..."
              rbenv install 3.3.0
              rbenv global 3.3.0
              rbenv rehash
            else
              echo "Ruby 3.3.0 already installed, setting as global..."
              rbenv global 3.3.0
              rbenv rehash
            fi
            
            echo "Ruby version: $(ruby -v)"
          elif command -v ruby >/dev/null 2>&1; then
            echo "Using system Ruby: $(ruby -v)"
          else
            echo "Installing rbenv and Ruby..."
            curl -fsSL https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-installer | bash
            export PATH="$HOME/.rbenv/bin:$PATH"
            eval "$(rbenv init -)"
            rbenv install 3.3.0
            rbenv global 3.3.0
            rbenv rehash
            export PATH="$HOME/.rbenv/shims:$PATH"
          fi
          
          # Verify Ruby environment
          echo "Final Ruby check:"
          which ruby && ruby -v || echo "Ruby still not found"
          which gem && gem -v || echo "Gem not found"
          
          # Install/update gems
          if command -v gem >/dev/null 2>&1; then
            gem install bundler --no-document
            which bundle && bundle -v
            bundle install --deployment --without development test
          else
            echo "Cannot install gems - Ruby/Gem not available"
            exit 1
          fi
          
          # Precompile assets
          RAILS_ENV=production /home/benjamin/.rbenv/shims/bundle exec rails assets:precompile
          
          # Run database migrations
          RAILS_ENV=production /home/benjamin/.rbenv/shims/bundle exec rails db:migrate
          
          # Create restart file (used by Passenger/Puma)
          touch tmp/restart.txt
          
          # Restart services using service command (no sudo required)
          service puma restart || systemctl --user restart puma || echo "Puma restart attempted"
          service sidekiq restart || systemctl --user restart sidekiq || echo "Sidekiq restart attempted"
          
          # Diagnostic checks
          echo "üîç Running diagnostic checks..."
          
          echo "üìÇ Application directory:"
          ls -la /home/benjamin/b2b/
          
          echo "üîß Ruby environment:"
          echo "PATH: $PATH"
          which ruby && ruby -v || echo "Ruby not found"
          which bundle && bundle -v || echo "Bundle not found"
          which gem && gem -v || echo "Gem not found"
          
          echo "üì¶ Gem environment:"
          /home/benjamin/.rbenv/shims/bundle check || echo "Gems not properly installed"
          
          echo "‚öôÔ∏è  Service status:"
          sudo systemctl status b2b-rails --no-pager || echo "Rails service status check failed"
          ps aux | grep -E "(puma|sidekiq)" | grep -v grep || echo "No puma/sidekiq processes found"
          
          echo "üåê Port status:"
          netstat -tlnp | grep :3000 || echo "Port 3000 not listening"
          netstat -tlnp | grep :4000 || echo "Port 4000 not listening"
          
          echo "üìã Rails application check:"
          cd /home/benjamin/b2b
          
          # Try to run Rails with proper environment
          cd /home/benjamin/b2b
          if RAILS_ENV=production /home/benjamin/.rbenv/shims/bundle exec rails runner "puts 'Rails loaded successfully'" 2>/dev/null; then
            echo "‚úÖ Rails application loads correctly"
          else
            echo "‚ö†Ô∏è  Rails runner failed, but server may still be working"
            echo "This is often due to credentials/environment issues"
          fi
          
          echo "üöÄ Setting up and starting Rails server via systemd:"
          
          # Install systemd service file if it doesn't exist
          if [ ! -f "/etc/systemd/system/b2b-rails.service" ]; then
            echo "Installing systemd service file..."
            sudo cp /home/benjamin/b2b/config/systemd/b2b-rails.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable b2b-rails
          fi
          
          # Kill any existing Rails processes and start via systemd
          pkill -f "rails server" || echo "No existing Rails processes"
          pkill -f "puma" || echo "No existing Puma processes"
          
          # Start Rails server via systemd (ensures correct working directory)
          sudo systemctl restart b2b-rails
          
          echo "‚è≥ Waiting for server to start..."
          sleep 10
          
          echo "üìä Server logs:"
          sudo journalctl -u b2b-rails --since "1 minute ago" -n 20 || echo "No systemd logs found"
          echo "Production log:"
          tail -10 /home/benjamin/b2b/log/production.log || echo "No production log found"
          
          echo "üîç Health check:"
          # Test both ports
          echo "Testing port 3000:"
          curl -f -s http://localhost:3000/version && echo "‚úÖ Port 3000 responding" || echo "‚ùå Port 3000 not responding"
          
          echo "Testing port 4000:"
          curl -f -s http://localhost:4000/version && echo "‚úÖ Port 4000 responding" || echo "‚ùå Port 4000 not responding"
          
          echo "üîß Port usage details:"
          lsof -i :3000 || echo "Nothing listening on port 3000"
          lsof -i :4000 || echo "Nothing listening on port 4000"
          
          echo "üìã Nginx configuration check:"
          grep -r "proxy_pass.*:" /etc/nginx/ || echo "Cannot read nginx config"
          
          echo "üéâ Deployment process completed!"
          
          echo "üîß Running post-deployment health checks..."
          
          # Wait for services to fully start
          sleep 15
          
          # Check if Sidekiq health script exists and run it
          cd /home/benjamin/b2b
          if [ -f "./bin/sidekiq-health" ]; then
            echo "üìä Checking Sidekiq queue health..."
            if RAILS_ENV=production /home/benjamin/.rbenv/shims/bundle exec ./bin/sidekiq-health --production; then
              echo "‚úÖ Sidekiq queues are healthy"
            else
              echo "‚ö†Ô∏è  Sidekiq health check issues detected (deployment completed but review recommended)"
            fi
          else
            echo "‚ö†Ô∏è  Sidekiq health check script not found"
          fi
          
          # Basic Rails health check
          echo "üè• Testing Rails application health..."
          cd /home/benjamin/b2b
          if RAILS_ENV=production /home/benjamin/.rbenv/shims/bundle exec rails runner "puts 'Rails health: OK'" 2>/dev/null; then
            echo "‚úÖ Rails application is healthy"
          else
            echo "‚ö†Ô∏è  Rails health check failed (but server may still be working)"
          fi
          
          # Check critical queues specifically
          echo "üîç Checking critical Sidekiq queues..."
          cd /home/benjamin/b2b
          CRITICAL_QUEUES=("domain_dns_testing" "domain_mx_testing" "company_financials" "default")
          for queue in "${CRITICAL_QUEUES[@]}"; do
            if QUEUE_SIZE=$(RAILS_ENV=production /home/benjamin/.rbenv/shims/bundle exec rails runner "puts Sidekiq::Queue.new('$queue').size" 2>/dev/null); then
              echo "   $queue: $QUEUE_SIZE jobs"
            else
              echo "   $queue: Failed to check"
            fi
          done
          
          echo "‚ú® Health checks completed!"
