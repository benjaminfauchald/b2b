name: Deploy to Production

on:
  push:
    branches: [ master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.0
        bundler-cache: true
    
    - name: Run linting
      run: bundle exec rubocop

  test:
    needs: lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.0
        bundler-cache: true
    
    - name: Setup test credentials
      run: |
        mkdir -p config/credentials
        echo "2b6511362ac3e7195e7097e15c402eaa" > config/credentials/test.key
    
    - name: Setup test database
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:password@localhost:5432/b2b_test
      run: |
        bin/rails db:create
        bin/rails db:migrate
    
    - name: Run tests
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:password@localhost:5432/b2b_test
        REDIS_URL: redis://localhost:6379/0
      run: bundle exec rspec

  deploy:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd /home/benjamin/b2b
          git fetch origin
          git reset --hard origin/master
          
          # Debug rbenv setup
          echo "🔍 Debugging Ruby environment..."
          echo "HOME: $HOME"
          ls -la $HOME/.rbenv/ || echo "rbenv directory not found"
          ls -la $HOME/.rbenv/versions/ || echo "rbenv versions not found"
          
          # Setup rbenv environment
          if [ -f "$HOME/.rbenv/bin/rbenv" ]; then
            echo "Found rbenv, setting up environment..."
            export PATH="$HOME/.rbenv/bin:$PATH"
            eval "$(rbenv init -)"
            export PATH="$HOME/.rbenv/shims:$PATH"
            
            # Check if Ruby 3.3.0 is installed
            if [ ! -d "$HOME/.rbenv/versions/3.3.0" ]; then
              echo "Installing Ruby 3.3.0..."
              rbenv install 3.3.0
              rbenv global 3.3.0
              rbenv rehash
            else
              echo "Ruby 3.3.0 already installed, setting as global..."
              rbenv global 3.3.0
              rbenv rehash
            fi
            
            echo "Ruby version: $(ruby -v)"
          elif command -v ruby >/dev/null 2>&1; then
            echo "Using system Ruby: $(ruby -v)"
          else
            echo "Installing rbenv and Ruby..."
            curl -fsSL https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-installer | bash
            export PATH="$HOME/.rbenv/bin:$PATH"
            eval "$(rbenv init -)"
            rbenv install 3.3.0
            rbenv global 3.3.0
            rbenv rehash
            export PATH="$HOME/.rbenv/shims:$PATH"
          fi
          
          # Verify Ruby environment
          echo "Final Ruby check:"
          which ruby && ruby -v || echo "Ruby still not found"
          which gem && gem -v || echo "Gem not found"
          
          # Install/update gems
          if command -v gem >/dev/null 2>&1; then
            gem install bundler --no-document
            which bundle && bundle -v
            bundle install --deployment --without development test
          else
            echo "Cannot install gems - Ruby/Gem not available"
            exit 1
          fi
          
          # Precompile assets
          RAILS_ENV=production /home/benjamin/.rbenv/shims/bundle exec rails assets:precompile
          
          # Run database migrations
          RAILS_ENV=production /home/benjamin/.rbenv/shims/bundle exec rails db:migrate
          
          # Create restart file (used by Passenger/Puma)
          touch tmp/restart.txt
          
          # Restart services using service command (no sudo required)
          service puma restart || systemctl --user restart puma || echo "Puma restart attempted"
          service sidekiq restart || systemctl --user restart sidekiq || echo "Sidekiq restart attempted"
          
          # Diagnostic checks
          echo "🔍 Running diagnostic checks..."
          
          echo "📂 Application directory:"
          ls -la /home/benjamin/b2b/
          
          echo "🔧 Ruby environment:"
          echo "PATH: $PATH"
          which ruby && ruby -v || echo "Ruby not found"
          which bundle && bundle -v || echo "Bundle not found"
          which gem && gem -v || echo "Gem not found"
          
          echo "📦 Gem environment:"
          /home/benjamin/.rbenv/shims/bundle check || echo "Gems not properly installed"
          
          echo "⚙️  Process status:"
          ps aux | grep -E "(puma|sidekiq)" | grep -v grep || echo "No puma/sidekiq processes found"
          
          echo "🌐 Port status:"
          netstat -tlnp | grep :3000 || echo "Port 3000 not listening"
          netstat -tlnp | grep :4000 || echo "Port 4000 not listening"
          
          echo "📋 Rails application check:"
          cd /home/benjamin/b2b
          
          # Try to run Rails with proper environment
          if /home/benjamin/.rbenv/shims/bundle exec rails runner "puts 'Rails loaded successfully'" 2>/dev/null; then
            echo "✅ Rails application loads correctly"
          else
            echo "⚠️  Rails runner failed, but server may still be working"
            echo "This is often due to credentials/environment issues"
          fi
          
          echo "🚀 Starting Rails server manually:"
          cd /home/benjamin/b2b
          # Kill any existing Rails processes
          pkill -f "rails server" || echo "No existing Rails processes"
          pkill -f "puma" || echo "No existing Puma processes"
          
          # Start Rails server bound to all interfaces on port 3000 (for nginx proxy)
          RAILS_ENV=production PORT=3000 nohup /home/benjamin/.rbenv/shims/bundle exec rails server -b 0.0.0.0 -p 3000 > /tmp/rails.log 2>&1 &
          
          echo "⏳ Waiting for server to start..."
          sleep 10
          
          echo "📊 Server logs:"
          tail -20 /tmp/rails.log || echo "No log file found"
          
          echo "🔍 Health check:"
          # Test both ports
          echo "Testing port 3000:"
          curl -f -s http://localhost:3000/version && echo "✅ Port 3000 responding" || echo "❌ Port 3000 not responding"
          
          echo "Testing port 4000:"
          curl -f -s http://localhost:4000/version && echo "✅ Port 4000 responding" || echo "❌ Port 4000 not responding"
          
          echo "🔧 Port usage details:"
          lsof -i :3000 || echo "Nothing listening on port 3000"
          lsof -i :4000 || echo "Nothing listening on port 4000"
          
          echo "📋 Nginx configuration check:"
          grep -r "proxy_pass.*:" /etc/nginx/ || echo "Cannot read nginx config"
          
          echo "🎉 Deployment process completed!"
          
          echo "🔧 Running post-deployment health checks..."
          
          # Wait for services to fully start
          sleep 15
          
          # Check if Sidekiq health script exists and run it
          if [ -f "./bin/sidekiq-health" ]; then
            echo "📊 Checking Sidekiq queue health..."
            if /home/benjamin/.rbenv/shims/bundle exec ./bin/sidekiq-health --production; then
              echo "✅ Sidekiq queues are healthy"
            else
              echo "⚠️  Sidekiq health check issues detected (deployment completed but review recommended)"
            fi
          else
            echo "⚠️  Sidekiq health check script not found"
          fi
          
          # Basic Rails health check
          echo "🏥 Testing Rails application health..."
          cd /home/benjamin/b2b
          if RAILS_ENV=production /home/benjamin/.rbenv/shims/bundle exec rails runner "puts 'Rails health: OK'" 2>/dev/null; then
            echo "✅ Rails application is healthy"
          else
            echo "⚠️  Rails health check failed (but server may still be working)"
          fi
          
          # Check critical queues specifically
          echo "🔍 Checking critical Sidekiq queues..."
          CRITICAL_QUEUES=("domain_dns_testing" "domain_mx_testing" "company_financials" "default")
          for queue in "${CRITICAL_QUEUES[@]}"; do
            if QUEUE_SIZE=$(RAILS_ENV=production /home/benjamin/.rbenv/shims/bundle exec rails runner "puts Sidekiq::Queue.new('$queue').size" 2>/dev/null); then
              echo "   $queue: $QUEUE_SIZE jobs"
            else
              echo "   $queue: Failed to check"
            fi
          done
          
          echo "✨ Health checks completed!"
