name: SCT Pattern Compliance

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'app/services/**'
      - 'spec/services/**'
      - 'lib/tasks/sct_compliance.rake'
      - '.github/workflows/sct_compliance.yml'
  pull_request:
    branches: [ master, main, develop ]
    paths:
      - 'app/services/**'
      - 'spec/services/**'

jobs:
  sct_compliance:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: b2b_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.0
        bundler-cache: true
    
    - name: Set up database
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/b2b_test
        RAILS_ENV: test
      run: |
        bundle exec rails db:create
        bundle exec rails db:schema:load
    
    - name: Run SCT Compliance Check
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/b2b_test
        REDIS_URL: redis://localhost:6379/0
        RAILS_ENV: test
      run: |
        bundle exec rake sct:compliance
    
    - name: Run SCT Compliance Tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/b2b_test
        REDIS_URL: redis://localhost:6379/0
        RAILS_ENV: test
      run: |
        bundle exec rspec spec/support/shared_examples/sct_compliance.rb -v
    
    - name: Run Service Tests with SCT Examples
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/b2b_test
        REDIS_URL: redis://localhost:6379/0
        RAILS_ENV: test
      run: |
        bundle exec rspec spec/services/ -v
    
    # Temporarily disabled due to custom cop dependency issues
    # - name: RuboCop SCT Compliance  
    #   run: |
    #     bundle exec rubocop --config .rubocop_sct.yml app/services/
    
    - name: Comment PR with SCT Compliance Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          
          try {
            const output = execSync('bundle exec rake sct:compliance', { 
              encoding: 'utf8',
              env: { 
                ...process.env,
                DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/b2b_test',
                REDIS_URL: 'redis://localhost:6379/0',
                RAILS_ENV: 'test'
              }
            });
            
            const comment = `## üîç SCT Pattern Compliance Check
            
            ‚úÖ All services pass SCT compliance checks!
            
            <details>
            <summary>Full Compliance Report</summary>
            
            \`\`\`
            ${output}
            \`\`\`
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            const comment = `## ‚ùå SCT Pattern Compliance Check Failed
            
            Some services do not meet SCT compliance requirements.
            
            <details>
            <summary>Compliance Issues</summary>
            
            \`\`\`
            ${error.stdout || error.message}
            \`\`\`
            </details>
            
            Please fix the SCT compliance issues before merging this PR.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            throw error;
          }